/Data Model:
/Going with data model where tweet is dependent on user
/    User:
/		id
/		name
/		email address
/		following []
/		followers []

/	Tweet:
/		id 
/		content
/		date
/		creator -> foreign key to user
/		likes -> [] array of foreign keys to users

/Now the "all posts" page 
	Needs to have a form for creating posts
	/	Need to create a new form in forms.py
	/	Need to send that form to the view
	/	Do I need a PUT request in the form's front end?
	/		NO
		
	/	In planning for this, I think I need to do a fetch request in the javascript to post the message
	/		that way I can call more javascript afterwards
	/		to update the page
	/ UPDATE: instead chose to just use the method provided by django to make a post request from the html page directly
	/ This forces a page refresh, but that's okay

	/20.12.07
	/Alternative way to display names and links is instead of having an await in the JS,
	/we can just build the return function some more,
	/right now it returns an array of objects each containing post data
	/all we need to do is modify it so that it calls the method that returns the name of the writer
	/from the writer id, and then adding that to the object bundle
	/This might be helpful, you will most likely need to reengineer a lot of the api logic
	/https://stackoverflow.com/questions/25977100/django-how-to-re-route-a-request-to-a-different-view-using-middleware

		/An alternative way might be to edit the model so that for each message, both the id and name of the writer are stored
		/but that is a more cumbersome way to do it
		/You do not have to list the people who like a post, only the number of likes, so this may be a better way after all 

		/alternative way to do it is to use this
		/https://stackoverflow.com/questions/8615860/calculated-field-in-django-queryset-values
		/manually creating the queryset to json (yukes)

	/Needs to display all posts by all users
	/on page load need to send a get request to server url
	/Need to make an api url that returns json of Xth ten messages
	/Need to modify api url to only get 10 at a time
	
		/20.12.10
		/I think the best way to do this is to have a global hidden number in the html
		/Start that number at 0 and pass that into the method that returns messages, and it
		/will get 0-10
		/then update it to +1 = 1 and it will grab messages 10-20
		/and pressing "next" again will update +1 again so it is primed to grab 20-30
		
		/In order to update the numer use this:
		/https://stackoverflow.com/questions/11876414/update-number-in-same-place-on-web-page-with-javascript

		/Need to check if this is reversable too
	
	/Need to modify api url to take a second parameter equal to the number of times the user has clicked next x 110
	/	The api url should return that x10th 
	/	for example clicking next twice should give us messages 20-30
	/Need to create a "next button" and bind it to this api action
	
	/Need to display the messages in the front end
	/	need to dynamically generate div for each message (10 at a time)
	/	all inside a bigger div that is cleared and filled everytime a user clicks next
	
/There is a problem with the posts, they have to be in date order but since they are generated
/through async, this is not enforced and they are generated in whatever order the async completes 
/in...

//----------------------------------------------------------------------//
Need to display user pages:
	//Name
	//Need to display number of followers user has
	//	Couple ways to do this
	//	1) Add a "number of followers" field to the model
	//		and update this value through the api

	//	2) Create a url api that requests the number of followers
	//	 and return the count
	//Need to display number of people user follows
	//	See above, the same thing

	/20.12.13
	/	Left off on userpage.js on "loadUserData()"
	/	trying to set the inner html of the userpage div

	/20.12.14 
	/	Left off trying to edit CSS of the "#user_information" id on the userpage.html page
	/	I want a blue border and padding
	/	Also need to display rest of information like number of followers etc.	

	/20.12.15
	/	Left off trying to piece together the message response api for users

	20.12.16
		/Just realized the post order/time-sort-display is messed up
		/It works as intended but is hard to edit because the way I named things is unintuitive 
		/Left off with ability to move back and forth in users posts
		
	//	Now need to implement the ability to follow a user

	//Follow or unfollow the user (unless the profile is your own)
	//Need to create api for this
	//	On page load, a get request to see if the user logged in currently follows the user on the page
	//	if the user does follow:
	//		return true
	//		display "unfollow" button
	//	if the user does not follow:
	//		return false
	//		dispay "follow" button
	//	if they are the same user (user logged in is on their own page):
	//		return something else??
	//		do not display anything

	//	any time a button is clicked, it creates a post request tha t
	//	
	//	the actual javascript for this will call the api 
	//	and then disable the follow button
	//	and replace it with an unfollow button

	//	Perhaps you can get the user ids and then set them as global variabls in the html to reference them?
		
	20.20.17
		//Left off on making the user follows api
		//Need to make it asynchronous so the value can be returned!
		
		//In the models I have followers and following
			//I think I will only use following that way when doing api calls
			//I am at most editing 1 object (the user object of the user logged in)
			//as opposed to all other user objects

	20.20.22
		//Left off after finishing the buttons for follow/unfollow
		//Now I need to create the api to follow/unfollow
		//It will have to be a post request
		//	A post request is made
		//	the URL calls the proper view
		//	which edits the database
		//	then sends back a "success" message, or it can be specific like "followed"/"unfollowed"
		//afterwards the button is changed (I think this can just be done by recalling loadFollowStatus()
		//and passing in the opposite value of the "follows" parameter)
		//	Hardest part of this will be the database edit

	20.20.23
		// Can now follow and unfollow users
		//Next need to be able to edit posts
		//	First need to have "edit post" button for every post
		//		"When a user clicks “Edit” for one of their own posts, the content of their post should be replaced with a textarea where the user can edit the content of their post.
		//		The user should then be able to “Save” the edited post. Using JavaScript, you should be able to achieve this without requiring a reload of the entire page.
		//		For security, ensure that your application is designed such that it is not possible for a user, via any route, to edit another user’s posts."
		//	
		//	I think the best way to do this is to 
		//		append the user id to a hidden <span> next to each message
		//		when generating the posts, id is checked with the current user id 
		//			(which is available on page load)
		//		if they are the same value, 
		//			add an edit button which calls a function with the desired behavior

	20.20.27
		//Left off on the edit function
		//I need to send a post request with the content of whatever the user posts
		//TODO grab the new text inputted by the user om the 'textarea_id' textarea
		//then store it in a variable and replace "test_value" with that var in the xhr.send below
		//then need to edit the views.py to make the change in the database
		finally need to reset the div holding the message to whatever the new message

	20.20.30
		//Left off on resetting the div
		//created a new url route and view ("message_content")
		//now I need to send a fetch request to it in the "reset_message" function in message.js

		// now need to do the exact same thing for userpage...

		Need to add like and dislike button... (for EVERY post not just ones that aren't the current users)
			//Need to add an integer "numoflikes" to the user model
			//need to add a new button to the UI next to follow button (add it on the next line so after a <br>)
			//	Needs to be in its own DIV with its own ID! inside the post div
			//add a "Likes: " counter right below it, also inside the div
			//	make sure that upon page load the number of likes is grabbed and added to the post
			
			//Need to create a url route and view that likes a post
			//Need to create a url route and view that unlikes a post
			//	both of these, the message id and user id need to be passed in
			//	a database update needs to be made

			//after calling the route, the "Likes: " counter needs to be updated
			//	also the button has to change (like -> unlike & unlike -> like)

			// Now need to make it so that edited posts also get the button
			//Now I need to implement the like and dislike button for user pages

	21.01.02
		Need to create following page

		need follow page which shows posts by users that are followed only
			This will need to be done similar to what I do now BUT with the addition of OR clauses in the queryset
			Documentation says:
			https://docs.djangoproject.com/en/3.1/ref/models/querysets/#django.db.models.Q
			https://docs.djangoproject.com/en/3.1/topics/db/queries/#complex-lookups-with-q

		finally need to make sure users not logged in cannot like posts
			I think the simplest way to do this is to return a user id of -1 on check 
			and hide buttons using this variable globally
